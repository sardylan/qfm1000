version: 2.1
jobs:
  package-debian-bullseye:
    docker:
      - image: debian:bullseye
        environment:
          BUILD_TYPE: Release
          DEBIAN_FRONTEND: noninteractive
    working_directory: ~/qfm1000
    steps:
      - run:
          name: "Installing libs and tools"
          command: |
            apt update
            apt install -y build-essential pkg-config cmake git file lsb-release
            apt install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libqt5svg5-dev libqt5serialport5-dev
      - checkout
      - run:
          name: "Creating Building directory"
          command: "cmake -E make_directory ~/qfm1000/build"
      - run:
          name: "Configuring project"
          command: "cd ~/qfm1000/build && cmake ~/qfm1000 -DCMAKE_BUILD_TYPE=$BUILD_TYPE"
      - run:
          name: "Building project"
          command: "cd ~/qfm1000/build && cmake --build . --config $BUILD_TYPE --parallel"
      - run:
          name: "Running tests"
          command: "cd ~/qfm1000/build && ctest -C $BUILD_TYPE --output-on-failure"
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-eeprom.xml
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-values.xml
      - run:
          name: "Packaging"
          command: |
            (cd ~/qfm1000/build && cpack)
            mkdir ~/qfm1000/build/deb
            cp -a ~/qfm1000/build/*.deb ~/qfm1000/build/deb/
      - store_artifacts:
          path: ~/qfm1000/build/deb
  package-ubuntu-focal:
    docker:
      - image: ubuntu:focal
        environment:
          BUILD_TYPE: Release
          DEBIAN_FRONTEND: noninteractive
    working_directory: ~/qfm1000
    steps:
      - run:
          name: "Installing libs and tools"
          command: |
            apt update
            apt install -y build-essential pkg-config cmake git file lsb-release
            apt install -y qt5-default libqt5svg5-dev libqt5serialport5-dev
      - checkout
      - run:
          name: "Creating Building directory"
          command: "cmake -E make_directory ~/qfm1000/build"
      - run:
          name: "Configuring project"
          command: "cd ~/qfm1000/build && cmake ~/qfm1000 -DCMAKE_BUILD_TYPE=$BUILD_TYPE"
      - run:
          name: "Building project"
          command: "cd ~/qfm1000/build && cmake --build . --config $BUILD_TYPE --parallel"
      - run:
          name: "Running tests"
          command: "cd ~/qfm1000/build && ctest -C $BUILD_TYPE --output-on-failure"
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-eeprom.xml
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-values.xml
      - run:
          name: "Packaging"
          command: |
            (cd ~/qfm1000/build && cpack)
            mkdir ~/qfm1000/build/deb
            cp -a ~/qfm1000/build/*.deb ~/qfm1000/build/deb/
      - store_artifacts:
          path: ~/qfm1000/build/deb
  package-ubuntu-hirsute:
    docker:
      - image: ubuntu:hirsute
        environment:
          BUILD_TYPE: Release
          DEBIAN_FRONTEND: noninteractive
    working_directory: ~/qfm1000
    steps:
      - run:
          name: "Installing libs and tools"
          command: |
            apt update
            apt install -y build-essential pkg-config cmake git file lsb-release
            apt install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libqt5svg5-dev libqt5serialport5-dev
      - checkout
      - run:
          name: "Creating Building directory"
          command: "cmake -E make_directory ~/qfm1000/build"
      - run:
          name: "Configuring project"
          command: "cd ~/qfm1000/build && cmake ~/qfm1000 -DCMAKE_BUILD_TYPE=$BUILD_TYPE"
      - run:
          name: "Building project"
          command: "cd ~/qfm1000/build && cmake --build . --config $BUILD_TYPE --parallel"
      - run:
          name: "Running tests"
          command: "cd ~/qfm1000/build && ctest -C $BUILD_TYPE --output-on-failure"
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-eeprom.xml
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-values.xml
      - run:
          name: "Packaging"
          command: |
            (cd ~/qfm1000/build && cpack)
            mkdir ~/qfm1000/build/deb
            cp -a ~/qfm1000/build/*.deb ~/qfm1000/build/deb/
      - store_artifacts:
          path: ~/qfm1000/build/deb
  package-ubuntu-impish:
    docker:
      - image: ubuntu:impish
        environment:
          BUILD_TYPE: Release
          DEBIAN_FRONTEND: noninteractive
    working_directory: ~/qfm1000
    steps:
      - run:
          name: "Installing libs and tools"
          command: |
            apt update
            apt install -y build-essential pkg-config cmake git file lsb-release
            apt install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libqt5svg5-dev libqt5serialport5-dev
      - checkout
      - run:
          name: "Patching sources"
          command: "cd / && patch -Np0 -i ~/qfm1000/patch/qt-5.15.2_gcc-11.patch"
      - run:
          name: "Creating Building directory"
          command: "cmake -E make_directory ~/qfm1000/build"
      - run:
          name: "Configuring project"
          command: "cd ~/qfm1000/build && cmake ~/qfm1000 -DCMAKE_BUILD_TYPE=$BUILD_TYPE"
      - run:
          name: "Building project"
          command: "cd ~/qfm1000/build && cmake --build . --config $BUILD_TYPE --parallel"
      - run:
          name: "Running tests"
          command: "cd ~/qfm1000/build && ctest -C $BUILD_TYPE --output-on-failure"
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-eeprom.xml
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-values.xml
      - run:
          name: "Packaging"
          command: |
            (cd ~/qfm1000/build && cpack)
            mkdir ~/qfm1000/build/deb
            cp -a ~/qfm1000/build/*.deb ~/qfm1000/build/deb/
      - store_artifacts:
          path: ~/qfm1000/build/deb
  package-ubuntu-jammy:
    docker:
      - image: ubuntu:jammy
        environment:
          BUILD_TYPE: Release
          DEBIAN_FRONTEND: noninteractive
    working_directory: ~/qfm1000
    steps:
      - run:
          name: "Installing libs and tools"
          command: |
            apt update
            apt install -y build-essential pkg-config cmake git file lsb-release
            apt install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libqt5svg5-dev libqt5serialport5-dev
      - checkout
      - run:
          name: "Patching sources"
          command: "cd / && patch -Np0 -i ~/qfm1000/patch/qt-5.15.2_gcc-11.patch"
      - run:
          name: "Creating Building directory"
          command: "cmake -E make_directory ~/qfm1000/build"
      - run:
          name: "Configuring project"
          command: "cd ~/qfm1000/build && cmake ~/qfm1000 -DCMAKE_BUILD_TYPE=$BUILD_TYPE"
      - run:
          name: "Building project"
          command: "cd ~/qfm1000/build && cmake --build . --config $BUILD_TYPE --parallel"
      - run:
          name: "Running tests"
          command: "cd ~/qfm1000/build && ctest -C $BUILD_TYPE --output-on-failure"
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-eeprom.xml
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-values.xml
      - run:
          name: "Packaging"
          command: |
            (cd ~/qfm1000/build && cpack)
            mkdir ~/qfm1000/build/deb
            cp -a ~/qfm1000/build/*.deb ~/qfm1000/build/deb/
      - store_artifacts:
          path: ~/qfm1000/build/deb
  package-windows-x64:
    machine:
      image: mcr.microsoft.com/windows/nanoserver
    environment:
      BUILD_TYPE: Release
    working_directory: $env:HOMEPATH\qfm1000
    steps:
      - run:
          name: "Creating Building directory"
          shell: powershell.exe
          command: New-Item -Path $env:HOMEPATH\qfm1000 -Name qfm1000 -ItemType directory
      - run:
          name: "Installing CMake"
          shell: powershell.exe
          command: |
            Invoke-WebRequest -Uri "https://github.com/Kitware/CMake/releases/download/v3.21.4/cmake-3.21.4-windows-x86_64.msi" -OutFile $env:HOMEPATH\cmake-3.21.4-windows-x86_64.msi
            msiexec.exe /i $env:HOMEPATH\cmake-3.21.4-windows-x86_64.msi /QN
      - run:
          name: "Installing WiX Toolset"
          shell: powershell.exe
          command: |
            Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe" -OutFile $env:HOMEPATH\wix311.exe
            $env:HOMEPATH\wix311.exe /quiet
      - checkout
      - run:
          name: "Configuring project"
          shell: powershell.exe
          command: |
            cd $env:HOMEPATH\qfm1000\build
            cmake $env:HOMEPATH\qfm1000 -DCMAKE_BUILD_TYPE=%BUILD_TYPE%
      - run:
          name: "Building project"
          shell: powershell.exe
          command: |
            cd $env:HOMEPATH\qfm1000\build
            cmake --build . --config %BUILD_TYPE% --parallel
      - run:
          name: "Running tests"
          shell: powershell.exe
          command: |
            cd $env:HOMEPATH\qfm1000\build
            ctest -C %BUILD_TYPE% --output-on-failure"
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-eeprom.xml
      - store_test_results:
          path: ~/qfm1000/build/test/eeprom/test-result-eeprom-values.xml
      - run:
          name: "Packaging"
          shell: powershell.exe
          command: |
            cd $env:HOMEPATH\qfm1000\build
            cpack
            New-Item -Path $env:HOMEPATH\qfm1000\build -Name msi -ItemType directory
            Copy-Item *.msi -Destination $env:HOMEPATH\qfm1000\build\msi
      - store_artifacts:
          path: $env:HOMEPATH\qfm1000\build\msi
workflows:
  package:
    jobs:
      - package-debian-bullseye
      - package-ubuntu-focal
      - package-ubuntu-hirsute
      - package-ubuntu-impish
      - package-ubuntu-jammy
      - package-windows-x64
